--------------------------------------------

GIt BookScript -Notes
--------------------------------------------
--------------------------------------------


$ which git
/mingw64/bin/gits.1

$ git --version
git version 2.25.0.windows.1
--------------------------------------------

#config System 
git config --system

#User 
git config --global

#project 
git config
--------------------------------------------

#start

git config --global user.name "name"
git config --global user.email "someone@domain.com"

#git config --list //check the configurations

# Config editor in GIt
git config --global core.editor"notepad.exe"

# use colours
git config --global color.ui true 

#git help //help command
#git help command 

// create Folder project and init repository
# git init 

//how to add 

#git add .
#git commit -m "initial commit"

# Life cycle of git 
1- make changes
2- add the changes
3- commit changes to repository with messag----e

--------------------------------------------
#writting commit messages ( what was changed)
- short line summary 
-optionally followed blanl line and more completed
-Use present not past
-[css,js]  "bug fix"  "#38405"
---------------------------------------------
# git log // got commit messages
#git log -n 10 // specified the number of commit 
#git log --until=2020-02-19
#git log --author ="kevin"
#git log --grep="init" //ger commit messages with the info commit

---------------------------------------------------------------
GIt Concepts and Architecture
-----------------------------
Two-Tree architecture- Workflow 
(represent file structure)

	Repository (->checkout) 
	working (->commit)
	
Three-Three architecture (GITHUB Architecture)

	repository
	staging index->git commit file.txt
	working->git add file.txt


--------------------------------------------
Edit file

 make change v2 of that file 
 git add v2
 git commit v2 

     v1 v2 v3 -  repository 

 - Git make copies of versions at the end we have 
 original, version 1 , version 2, version 3 etc etc 

    v1 v2 v2 SNAPSHOT 

- Git generates a checksum for each change set
	-> checksum algorithm convert data into a simple number
	->same data always equals same cheksum
Data integrity is fundamental 
	 ->Changing data would change checksum
Git uses SHA-1 hash algorithm to create checksums
	 ->40 character hexadecimal string 
		(94859489faaaaadfasd )
	
	
	5C123723		 3656C123723	EASD122435 (CHEKSUM)
	 PARENT COMMIT
	 AUTHOR	COMMIT
	 MESSAGE COMMIT	
	
	snapshot A       snapshot B 	snapshot c  
	
--------------------------------------------
HEAD
- Pointer to tip of current branch repository
- last state of repository what was last check out
- points to parent of next commit 

	5C123723(master) 3656C123723 EASD122435(parent/head) 	

	
	if you do ls -la
	
$ ls -la
total 17
drwxr-xr-x 1 tiago 197609   0 fev 19 11:44 ./
drwxr-xr-x 1 tiago 197609   0 fev 19 10:27 ../
-rw-r--r-- 1 tiago 197609  32 fev 19 11:44 COMMIT_EDITMSG
-rw-r--r-- 1 tiago 197609 130 fev 19 10:53 config
-rw-r--r-- 1 tiago 197609  73 fev 19 10:26 description
-rw-r--r-- 1 tiago 197609  23 fev 19 10:26 HEAD
drwxr-xr-x 1 tiago 197609   0 fev 19 10:26 hooks/
-rw-r--r-- 1 tiago 197609 153 fev 19 11:44 index
drwxr-xr-x 1 tiago 197609   0 fev 19 10:26 info/
drwxr-xr-x 1 tiago 197609   0 fev 19 10:35 logs/
drwxr-xr-x 1 tiago 197609   0 fev 19 11:44 objects/
drwxr-xr-x 1 tiago 197609   0 fev 19 10:26 refs/

tiago@DESKHACK MINGW64 ~/Desktop/GitHelp/.git (GIT_DIR!)


